#include <cstdio>
#include <iostream>
#include <set>
#include <map>
#include <stack>

#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Instruction.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/Support/SourceMgr.h"
#include "llvm/Support/raw_ostream.h"

#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_GREEN   "\x1b[32m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN    "\x1b[36m"
#define ANSI_COLOR_RESET   "\x1b[0m"

using namespace llvm;

std::set<Instruction*> findInitializedVars(BasicBlock*,std::set<Instruction*>);
std::set<Instruction*> checkLeakage(BasicBlock*, std::set<Instruction*>);
std::set<Instruction*> union_sets(std::set<Instruction*>, std::set<Instruction*>);

int main(int argc, char **argv)
{
    // Read the IR file.
    LLVMContext &Context = getGlobalContext();
    SMDiagnostic Err;

    // Extract Module M from IR (assuming only one Module exists)
    Module *M = ParseIRFile(argv[1], Err, Context);
    if (M == nullptr)
    {
      fprintf(stderr, "error: failed to load LLVM IR file \"%s\"", argv[1]);
      return EXIT_FAILURE;
    }

    // 1.Extract Function main from Module M
    Function *F = M->getFunction("main");
    
    // 2.Define analysisMap as a mapping of basic block labels to empty set (of instructions):
    // For example: Assume the input LLVM IR has 4 basic blocks, the map
    // would look like the following:
    // entry -> {}
    // if.then -> {}
    // if.else -> {}
    // if.end -> {}        
    std::map<BasicBlock*,std::set<Instruction*>> analysisMap;
    for (auto &BB: *F){
      std::set<Instruction*> emptySet;
      BasicBlock *blockPointer = &BB;
    	analysisMap[blockPointer] = emptySet;
    }      
    // Note: All variables are of type "alloca" instructions. Ex.
    // Variable a: %a = alloca i32, align 4

    // 3. Traversing the CFG in Depth First Order
    // In order to do so, we use a stack: traversalStack.
    // First, we add the initial analysisNode consisting of the following two items to the stack:
    // 	    - entry basic block 
    //	    - an empty set (of instructions) as the initial list of initialized variables
    std::stack<std::pair<BasicBlock*,std::set<Instruction*> > > traversalStack;
    BasicBlock* entryBB = &F->getEntryBlock();
    std::set<Instruction*> emptySet;
    std::pair<BasicBlock*,std::set<Instruction*> > analysisNode = std::make_pair(entryBB,emptySet);
    traversalStack.push(analysisNode);
    
    // 4. while the stack is not empty we pop the top analysisNode
    // An updated analysis (list of initialized vars) is generated by running the findInitializedVars on the analysisNode
    // The updated list of initialized vars is unioned with the current list of initialized vars for the basic block in the 
    // analysis Map
    // Finally, the successor nodes of the current basic block with the updated list of initialized vars is added to the stack
    // Extract updatedInitializedVars (The list of initialized variables after BB) from BB and initializedVars
    // from it, and then we add all its successors to it    
    while(!traversalStack.empty()){
        // Pop the top analysis node from stack
        std::pair<BasicBlock*,std::set<Instruction*> > analysisNode = traversalStack.top();
       	traversalStack.pop();
       	
	    // Extract the basic block and the set of initialized variables from  analysisNode
	    BasicBlock* BB = analysisNode.first;
      	std::set<Instruction*> initializedVars = analysisNode.second;     

        // Extract updatedInitializedVars (The list of initialized variables 
	    // after BB) from BB and initializedVars
        std::set<Instruction*> updatedInitializedVars = checkLeakage(BB,initializedVars);
        
        // Update the analysis of node BB in the MAP to the union of currently sored InitializedVars 
        // and the generated updatedInitializedVars
        std::set<Instruction*> unionInitializedVars = union_sets(analysisMap[BB],updatedInitializedVars); 
       	analysisMap[BB] = unionInitializedVars;
        
        // Extract the last instruction in the stack (Terminator Instruction)
        const TerminatorInst *TInst = BB->getTerminator();
        
	    // Extract the number of successors the terminator instructor has
	    int NSucc = TInst->getNumSuccessors();
      //printf("number of successor %i\n", NSucc);
	
	    for (int i = 0;  i < NSucc; ++i) {
            // for all successor basic blocks, add them plus the updatedInitializedVars to the stack 
            // if fixpoint condition is not met.
            //
            // Fixpoint Condition:
            // We only add successor nodes to the stack if the union of the new list of initialzied variables for 
            // the successor node is different from the currently stored list of initialzied variables
            // for the successor node.
            
            // Load the current stored analysis for a successor node
            BasicBlock *Succ = TInst->getSuccessor(i);    
            std::set<Instruction*> succInitializedVars = analysisMap[Succ];
	        if (succInitializedVars != unionInitializedVars){
	            std::pair<BasicBlock*,std::set<Instruction*> > succAnalysisNode = std::make_pair(Succ,updatedInitializedVars);
	           traversalStack.push(succAnalysisNode);
            }

    	}	
    }
    
    // When we exit the loop the analysis have finished and the analysis map will point to the set of 
    // initialized instructions at each basic block. Ex.
    // entry -> {%a = alloca i32, align 4}
    // if.then -> {%a = alloca i32, align 4}
    // if.else -> {}
    // if.end -> {%a = alloca i32, align 4, %b = alloca i32, align 4}  
    //
    // We now print the analysis results:
    int flag = false;
    for (auto& row : analysisMap){
        std::set<Instruction*> initializedVars = row.second;
        //std::string BBLabel = row.first;
	    //errs() << BBLabel << ":\n";
        row.first->printAsOperand(errs(), false);
        for (Instruction* var : initializedVars){
           	errs() << "\t";
	       	var->dump();

	       	const TerminatorInst *TInst = row.first->getTerminator();
  			int NSucc = TInst->getNumSuccessors();

  			if (NSucc == 0) {
	        	if (strncmp(var->getName().str().c_str(),"sink",4) == 0) {
					flag = true;
			    }
      		}
	    }
        errs() << "\n";
    }

    if (flag == true)
	printf(ANSI_COLOR_RED "OMG, Secret leaks to the Public"
	       ANSI_COLOR_RESET	"\n");
    else
	printf(ANSI_COLOR_GREEN "Secret does not leak to the Public"
	       ANSI_COLOR_RESET	"\n");      
   
    return 0;
}

// Input Arguments:
// BB: current Basic Block  
// initializedVars: The list of initialized vars before BB
// 
// Output:
// updatedInitializedVars: The list of initialized variables after BB
//
// This function receives a list of initialized variables before a basic block
// and returns an updated list of initialized variables after the basic block
std::set<Instruction*> findInitializedVars(BasicBlock* BB,
				    std::set<Instruction*> initializedVars)
{
  // updatedInitializedVars is first initialized to the current list
  // of initialized variables 
  std::set<Instruction*> updatedInitializedVars(initializedVars);
  
  // Loop through instructions in BB
  for (auto &I: *BB)
  {
    // Check if an Instruction is of the type Store Instruction
    // We assume variables are only initialized if they are 
    // assigned a value by the StoreInst.
    if (isa<StoreInst>(I)){
      // A Store Instruction is of the type:
      // Store Arg0, Arg1 
      // Where Arg0 is a %reg and Arg1 is a %variable.
      // We need to store the %variable since it is initialized 
      
      // We load Arg1 to a an instance of the class Value 
      // Note: All instructions and arguments are instaces of the Value class
      Value* v = I.getOperand(1);
      
      // Next we convert the instance of Value class to a variable
      // Note: All variables are of type "alloca" instructions. Ex.
      // Variable a: %a = alloca i32, align 4
      Instruction* var = dyn_cast<Instruction>(v); 
      
      // Finally, var is added to updatedInitializedVars
      updatedInitializedVars.insert(var);	
    }
  }
  return updatedInitializedVars;
}

// Performs set union
std::set<Instruction*> union_sets(std::set<Instruction*>A, std::set<Instruction*> B)
{
     A.insert(B.cbegin(), B.cend());
     return A;
}


std::set<Instruction*> checkLeakage(BasicBlock* BB,
            std::set<Instruction*> secretVars)
{
  std::set<Instruction*> newSecretVars(secretVars);
  
  // Loop through instructions in BB
  for (auto &I: *BB)
  {
    // Add secret variable to newSecretVars  
    if (strncmp(I.getName().str().c_str(),"source",6) == 0){
      printf(ANSI_COLOR_BLUE "Source found:%s" ANSI_COLOR_RESET "\n", 
       I.getName().str().c_str());
      newSecretVars.insert(dyn_cast<Instruction>(&I));
    }

    if (isa<StoreInst>(I)){
      // Check store instructions
      Value* v = I.getOperand(0);
      Instruction* op1 = dyn_cast<Instruction>(v); 
      if (op1 != nullptr &&
  newSecretVars.find(op1) != newSecretVars.end()){
  newSecretVars.insert(dyn_cast<Instruction>(I.getOperand(1))); 
      }
    }else{  
      // Check all other instructions
      for (auto op = I.op_begin(); op != I.op_end(); op++) {
  Value* v = op->get();
  Instruction* inst = dyn_cast<Instruction>(v);
  if (inst != nullptr && newSecretVars.find(inst) != 
             newSecretVars.end())
    newSecretVars.insert(dyn_cast<Instruction>(&I));
      }
    }
  }
  return newSecretVars;
}

